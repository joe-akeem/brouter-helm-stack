# Default values for brouter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: joeakeem/brouter
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 17777

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: 17777
readinessProbe:
  httpGet:
    path: /
    port: 17777

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  # consider making each of these a persistentVolumeClaim so the segments and profiles don't need to be downloaded again after a restart
  - name: segments4
    emptyDir: {}
  - name: profiles
    emptyDir: {}
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: segments4
    mountPath: /segments4
  - name: profiles
    mountPath: /profiles2
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

loader:
  image:
    containerName: segments
    repository: arunvelsriram/utils
    pullPolicy: IfNotPresent
    tag: v1.5.0
  command: ["sh", "-c"]
  intervalSeconds: 259200 # 3 days

  # for an overview which segments to download, see https://umap.openstreetmap.de/de/map/brouter-rd5-grid_9438#2/35.0/5.1
  downloadScript: |
    while true; do
      wget -N -P /segments4 https://brouter.de/brouter/segments4/E5_N45.rd5;
      wget -N -P /profiles2 https://bikerouter.de/profiles/Fastbike-lowtraffic-tertiaries.brf
      wget -N -P /profiles2 https://github.com/zossebart/brouter-mtb/archive/refs/tags/v1.2.3.tar.gz; tar --strip-components=1 -xzf /profiles2/v1.2.3.tar.gz -C /profiles2
      sleep {{ .Values.sync.intervalSeconds }};
    done
